"""
문제
정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.

X가 3으로 나누어 떨어지면, 3으로 나눈다.
X가 2로 나누어 떨어지면, 2로 나눈다.
1을 뺀다.
정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.

입력
첫째 줄에 1보다 크거나 같고, 106보다 작거나 같은 정수 N이 주어진다.

출력
첫째 줄에 연산을 하는 횟수의 최솟값을 출력한다.
"""


"""
해당 문제는 DP 방법을 사용하여서 답을 도출하였다. 처음에는 가능하다면 해당 수를 3으로 나눴을 때, 2로 나눴을 떄, 1을 뺐을 때 순으로 가장 좋은 결과를 이끌어낼 수 있다고 생각하였다.
따라서 if, elif, else문을 사용하여 코드를 구현한였다.
하지만 숫자가 높아지면서 답이 틀리기 시작하였다. 예를 들면 642라는 숫자는 2, 3에 의해 모두 나눠질 수 있는 수다. 하지만 이 떄, 가장 최소의 연산을 사용하는 방법은 2로 나누는 경우였다.
이러한 예외가 있기 때문에 나는 모든 경우의 수를 따지는 방법으로 코드룰 수정하였고 문제를 풀어냈다.
"""
n = int(input());

dp_list = [0] * (n+1)


if n >= 2:
    dp_list[2] = 1
if n >= 3:
    dp_list[3] = 1

for i in range(4, n+1):
    dp_list[i] = dp_list[i-1] + 1
    if i % 3 == 0:
        dp_list[i] = min(dp_list[i // 3]+1,  dp_list[i])
    if i % 2 == 0:
        dp_list[i] = min(dp_list[i // 2]+1,  dp_list[i])

print(dp_list[n])
